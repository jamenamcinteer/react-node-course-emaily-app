const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const mongoose = require("mongoose");
const keys = require("../config/keys");

const User = mongoose.model("users"); // fetching out of mongoose

// first arg is user model, second is done
passport.serializeUser((user, done) => {
  done(null, user.id); // user.id is identifying piece of information for identifying user in followup requests; this id is NOT the profile id, it is generated by MongoDB (_id property); can not assume that user has google id, could be facebook or something else; everyone will have an idea generated by mongo; after oauth authentication, we only care about this user.id, not the profile.id
});

passport.deserializeUser((id, done) => {
  // query our collection looking for a user with the id we have
  User.findById(id).then(user => {
    //.then with the user model
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: "/auth/google/callback",
      proxy: true
    },
    async (accessToken, refreshToken, profile, done) => {
      const existingUser = await User.findOne({ googleId: profile.id });

      if (existingUser) {
        return done(null, existingUser);
      }

      const user = await new User({ googleId: profile.id }).save();
      done(null, user);
    }
  )
);
